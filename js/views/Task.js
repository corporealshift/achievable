// Generated by CoffeeScript 1.7.1
define(['jquery', 'underscore', 'backbone', 'models/Task', 'hbs!tpl/Task'], function($, _, Backbone) {
  var tpl;
  tpl = require('hbs!tpl/Task');
  return Backbone.View.extend({
    initialize: function(options) {
      this.model = options.task;
      this.listenTo(this.model, 'change', this.render);
      console.log("new task view with task data", this.model.toJSON());
      this.setElement(tpl(this.model.toJSON()));
      if (this.model.get('due_date') == null) {
        this.hide_duedate();
      }
      return this.menu = this.$('.menu');
    },
    render: function() {
      return this;
    },
    events: {
      'click .actions': 'show_menu',
      'click .menu a': 'show_task_details',
      'click h4': 'show_task_details',
      'click .sections a': 'select_section',
      'mouseenter .menu a': 'menu_hover',
      'mouseleave .menu a': 'menu_hover'
    },
    show_menu: function(e) {
      e.preventDefault();
      window.selected_task = this.$el;
      return this.menu.removeClass('hidden');
    },
    show_task_details: function(e) {
      e.preventDefault();
      this.$el.addClass('detailed');
      this.hide_menu();
      return this.show_task_overlay();
    },
    hide_menu: function(e) {
      return this.menu.addClass('hidden');
    },
    hide_duedate: function() {
      this.$el.find('.remaining').addClass('hidden');
      return this.$el.find('.due-date').addClass('hidden');
    },
    show_duedate: function() {
      this.$el.find('.remaining').removeClass('hidden');
      return this.$el.find('.due-date').removeClass('hidden');
    },
    menu_hover: function(e) {
      return $(e.target).toggleClass('selected');
    },
    show_task_overlay: function() {
      $('.task-details').addClass('hidden');
      $('body').addClass('overlaid');
      return this.$el.find('.task-details').removeClass('hidden');
    },
    select_section: function(e) {
      var classes;
      e.preventDefault();
      classes = $(e.target).attr('class');
      if (classes.indexOf('selected') < 0) {
        return this.show_task_detail_section(classes);
      }
    },
    show_task_detail_section: function(section) {
      this.$('.sections a').removeClass('selected');
      this.$('.sections .' + section).addClass('selected');
      this.$('.section').removeClass('selected');
      return this.$('.section.' + section).toggleClass('selected');
    },
    _days_remaining: function(model, model_data) {
      var days_remaining;
      days_remaining = Math.round((model.get('due_date') - new Date()) / (1000 * 60 * 60 * 24));
      model_data.days_remaining = days_remaining;
      if (days_remaining < 0) {
        model_data.days_msg = "LATE";
      }
      if (days_remaining === 0) {
        model_data.days_msg = "Today";
      }
      if (days_remaining === 1) {
        model_data.days_msg = "1 Day";
      }
      if (days_remaining > 1) {
        model_data.days_msg = "" + days_remaining + " Days";
      }
      if (days_remaining >= 100) {
        model_data.days_msg = "Far";
      }
      if (days_remaining >= 10) {
        model_data.days_remaining = "future";
      }
      return model_data;
    }
  });
});
